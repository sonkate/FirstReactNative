{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../elements/style\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var db = SQLite.openDatabase('smarthome.db');\n  useEffect(function () {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);', []);\n    });\n  }, [db]);\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    msg = _useState6[0],\n    setMsg = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    cf_password = _useState8[0],\n    setConfirmPassword = _useState8[1];\n  var addUser = function addUser(username, password) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', [username, password]);\n    });\n  };\n  var handleRegister = function handleRegister() {\n    console.log('Register');\n    if (password !== cf_password) {\n      var _msg = 'Password did not match';\n      console.log(_msg);\n      return;\n    }\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM users WHERE username = ?;', [username], function (_, result) {\n        if (result.rows.length > 0) {\n          setMsg('User exists');\n        } else {\n          addUser(username, password);\n          setMsg('Create user successfully');\n        }\n      });\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container_login,\n    children: [_jsx(Text, {\n      style: styles.logo,\n      children: \"Register\"\n    }), _jsx(Text, {\n      style: styles.text_mid,\n      children: msg\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Username\",\n        placeholderTextColor: \"#003f5c\",\n        onChangeText: function onChangeText(text) {\n          return setUsername(text);\n        },\n        value: username\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Password\",\n        placeholderTextColor: \"#003f5c\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        value: password\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Confirm Password\",\n        placeholderTextColor: \"#003f5c\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(text) {\n          return setConfirmPassword(text);\n        },\n        value: cf_password\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginBtn,\n      onPress: handleRegister,\n      children: _jsx(Text, {\n        style: styles.loginText,\n        children: \"REGISTER\"\n      })\n    })]\n  });\n};\nexport default RegisterScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","styles","SQLite","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","db","openDatabase","transaction","tx","executeSql","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","msg","setMsg","_useState7","_useState8","cf_password","setConfirmPassword","addUser","handleRegister","console","log","_","result","rows","length","style","container_login","children","logo","text_mid","inputView","inputText","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","loginBtn","onPress","loginText"],"sources":["/home/son/Downloads/Mobile app/FirstReactNative/src/screens/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\nimport styles from '../../elements/style';\ninterface ILoginProps {\n    navigation: any;\n}\n\nimport * as SQLite from 'expo-sqlite';\nimport * as Crypto from 'expo-crypto';\n\nconst RegisterScreen: React.FC<ILoginProps> = ({ navigation }) => {\n    const db = SQLite.openDatabase('smarthome.db');\n\n    useEffect(() => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);',\n                [],\n            );\n        });\n    }, [db]);\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [msg, setMsg] = useState('');\n\n    const [cf_password, setConfirmPassword] = useState('');\n\n    const addUser = (username: string, password: string) => {\n        db.transaction((tx) => {\n            tx.executeSql(\n                'INSERT INTO users (username, password) VALUES (?, ?)',\n                [username, password],\n            );\n        });\n    }\n\n    const handleRegister = () => {\n        // Handle login logic here\n        console.log('Register');\n        if (password !== cf_password) {\n            const msg = 'Password did not match';\n            console.log(msg);\n            return;\n        }\n        db.transaction(tx => {\n            tx.executeSql(\n                'SELECT * FROM users WHERE username = ?;',\n                [username],\n                (_, result) => {\n                    if (result.rows.length > 0) {\n                        setMsg('User exists')\n                    } else {\n                        addUser(username, password)\n                        setMsg('Create user successfully')\n                    }\n                },\n            );\n        });\n    };\n\n    return (\n        <View style={styles.container_login}>\n            <Text style={styles.logo}>Register</Text>\n            <Text style={styles.text_mid}>{msg}</Text>\n\n            <TouchableOpacity style={styles.inputView}>\n                <TextInput\n                    style={styles.inputText}\n                    placeholder=\"Username\"\n                    placeholderTextColor=\"#003f5c\"\n                    onChangeText={text => setUsername(text)}\n                    value={username}\n                />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.inputView}>\n                <TextInput\n                    style={styles.inputText}\n                    placeholder=\"Password\"\n                    placeholderTextColor=\"#003f5c\"\n                    secureTextEntry={true}\n                    onChangeText={text => setPassword(text)}\n                    value={password}\n                />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.inputView}>\n                <TextInput\n                    style={styles.inputText}\n                    placeholder=\"Confirm Password\"\n                    placeholderTextColor=\"#003f5c\"\n                    secureTextEntry={true}\n                    onChangeText={text => setConfirmPassword(text)}\n                    value={cf_password}\n                />\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.loginBtn} onPress={handleRegister}>\n                <Text style={styles.loginText}>REGISTER</Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n\n\n\nexport default RegisterScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}