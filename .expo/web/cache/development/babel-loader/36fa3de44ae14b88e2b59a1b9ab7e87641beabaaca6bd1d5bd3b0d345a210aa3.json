{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../elements/style\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar initDatabase = function initDatabase() {\n  var db = SQLite.openDatabase('mydatabase.db');\n  db.transaction(function (tx) {\n    tx.executeSql('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT)');\n    tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', ['user1', 'password1']);\n    tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', ['user2', 'password2']);\n  });\n  return db;\n};\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    msg = _useState6[0],\n    setMsg = _useState6[1];\n  var db = SQLite.openDatabase('mydatabase.db');\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* (username, password) {\n      var db = yield initDatabase();\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT username FROM users WHERE username = ? AND password = ?', [username, password], function (tx, _ref3) {\n          var _ref3$rows = _ref3.rows,\n            length = _ref3$rows.length,\n            _array = _ref3$rows._array;\n          if (length > 0) {\n            navigation.navigate('HomePage');\n          } else {\n            setMsg('Invalid username or password');\n          }\n        }, function (error) {\n          console.log(error);\n          return true;\n        });\n      });\n    });\n    return function handleLogin(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container_login,\n    children: [_jsx(Text, {\n      style: styles.logo,\n      children: \"Login\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Username\",\n        placeholderTextColor: \"#003f5c\",\n        onChangeText: function onChangeText(text) {\n          return setUsername(text);\n        },\n        value: username\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Password\",\n        placeholderTextColor: \"#003f5c\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        value: password\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginBtn,\n      onPress: function onPress() {\n        return handleLogin(username, password);\n      },\n      children: _jsx(Text, {\n        style: styles.loginText,\n        children: \"LOGIN\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('Register');\n      },\n      children: _jsx(Text, {\n        style: styles.signupText,\n        children: \"Don't have an account? Sign up now\"\n      })\n    })]\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","styles","SQLite","jsx","_jsx","jsxs","_jsxs","initDatabase","db","openDatabase","transaction","tx","executeSql","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","msg","setMsg","handleLogin","_ref2","_asyncToGenerator","_ref3","_ref3$rows","rows","length","_array","navigate","error","console","log","_x","_x2","apply","arguments","style","container_login","children","logo","inputView","inputText","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","loginBtn","onPress","loginText","signupText"],"sources":["D:/BKU/Đồ án đa ngành/FirstReactNative/src/screens/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport styles from '../../elements/style';\r\nimport HomePage from './HomePage';\r\n\r\nimport * as SQLite from 'expo-sqlite'\r\n\r\ninterface ILoginProps {\r\n    navigation: any;\r\n}\r\nconst initDatabase = () => {\r\n    const db = SQLite.openDatabase('mydatabase.db');\r\n  \r\n    db.transaction(tx => {\r\n      // Create the users table\r\n      tx.executeSql(\r\n        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT)'\r\n      );\r\n  \r\n      // Insert some sample users\r\n      tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', [\r\n        'user1',\r\n        'password1',\r\n      ]);\r\n      tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', [\r\n        'user2',\r\n        'password2',\r\n      ]);\r\n    });\r\n  \r\n    return db;\r\n  };\r\nconst LoginScreen: React.FC<ILoginProps> = ({ navigation }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [msg, setMsg] = useState('');\r\n    const db = SQLite.openDatabase('mydatabase.db');\r\n\r\nconst handleLogin = async(username: string, password: string) => {\r\n    const db = await initDatabase();\r\n\r\n    db.transaction(tx => {\r\n        tx.executeSql(\r\n        'SELECT username FROM users WHERE username = ? AND password = ?',\r\n        [username, password],\r\n        (tx, { rows: { length, _array } }) => {\r\n            if (length > 0) {\r\n            // user found, navigate to the home screen\r\n            navigation.navigate('HomePage');\r\n            } else {\r\n            // user not found, display an error message\r\n            setMsg('Invalid username or password');\r\n            }\r\n        },\r\n        error => {\r\n            console.log(error);\r\n            return true;\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n    return (\r\n        <View style={styles.container_login}>\r\n            <Text style={styles.logo}>Login</Text>\r\n            <TouchableOpacity style={styles.inputView}>\r\n                <TextInput\r\n                    style={styles.inputText}\r\n                    placeholder=\"Username\"\r\n                    placeholderTextColor=\"#003f5c\"\r\n                    onChangeText={text => setUsername(text)}\r\n                    value={username}\r\n                />\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.inputView}>\r\n                <TextInput\r\n                    style={styles.inputText}\r\n                    placeholder=\"Password\"\r\n                    placeholderTextColor=\"#003f5c\"\r\n                    secureTextEntry={true}\r\n                    onChangeText={text => setPassword(text)}\r\n                    value={password}\r\n                />\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.loginBtn} onPress={() => handleLogin(username, password)}>\r\n                <Text style={styles.loginText}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => navigation.navigate('Register')}>\r\n                <Text style={styles.signupText}>Don't have an account? Sign up now</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default LoginScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}