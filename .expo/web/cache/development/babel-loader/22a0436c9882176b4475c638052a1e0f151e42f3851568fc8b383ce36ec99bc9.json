{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../elements/style\";\nimport * as SQLite from 'expo-sqlite';\nimport { useForm } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    confirm_password = _useState6[0],\n    setConfirmPassword = _useState6[1];\n  var _useForm = useForm(),\n    register = _useForm.register,\n    handleSubmit = _useForm.handleSubmit;\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    msg = _useState8[0],\n    setMsg = _useState8[1];\n  var handleRegister = function () {\n    var _ref2 = _asyncToGenerator(function* (username, password, cf_password) {\n      var db = SQLite.openDatabase('smarthome.db');\n      if (password !== cf_password) {\n        setMsg('Password did not match');\n        return;\n      } else {\n        db.transaction(function (tx) {\n          tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', [username, cf_password], function (_tx, result) {\n            setMsg('Registered successfully');\n            navigation.navigate('Login');\n          }, function (_tx, error) {\n            setMsg('Registration failed');\n            console.log('Error:', error);\n            return true;\n          });\n        }, function (error) {\n          console.log('Transaction error:', error);\n        });\n      }\n    });\n    return function handleRegister(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container_login,\n    children: [_jsx(Text, {\n      style: styles.logo,\n      children: \"Register\"\n    }), _jsx(Text, {\n      style: styles.text_mid,\n      children: msg ? msg : 'No thing'\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Username\",\n      placeholderTextColor: \"#003f5c\",\n      onChangeText: function onChangeText(text) {\n        return setUsername(text);\n      },\n      value: username\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Password\",\n      placeholderTextColor: \"#003f5c\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      },\n      value: password\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Confirm Password\",\n      placeholderTextColor: \"#003f5c\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return setConfirmPassword(text);\n      },\n      value: confirm_password\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginBtn,\n      onPress: function onPress() {\n        return handleRegister(username, password, confirm_password);\n      },\n      children: _jsx(Text, {\n        style: styles.loginText,\n        children: \"REGISTER\"\n      })\n    })]\n  });\n};\nexport default RegisterScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","styles","SQLite","useForm","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","confirm_password","setConfirmPassword","_useForm","register","handleSubmit","_useState7","_useState8","msg","setMsg","handleRegister","_ref2","_asyncToGenerator","cf_password","db","openDatabase","transaction","tx","executeSql","_tx","result","navigate","error","console","log","_x","_x2","_x3","apply","arguments","style","container_login","children","logo","text_mid","inputView","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","loginBtn","onPress","loginText"],"sources":["D:/BKU/Đồ án đa ngành/FirstReactNative/src/screens/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport styles from '../../elements/style';\r\nimport * as SQLite from 'expo-sqlite'\r\n\r\ninterface ILoginProps {\r\n    navigation: any;\r\n}\r\n\r\nimport * as Crypto from 'expo-crypto';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Button } from 'react-native-elements';\r\nconst RegisterScreen: React.FC<ILoginProps> = ({ navigation }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirm_password, setConfirmPassword] = useState('');\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    const [msg, setMsg] = useState('');\r\n\r\n\r\n\r\n    const handleRegister = async(username: string, password: string, cf_password: string) => {\r\n        // Handle login logic here\r\n        const db = SQLite.openDatabase('smarthome.db');\r\n   \r\n\r\n        if (password !== cf_password) {\r\n            setMsg('Password did not match');\r\n            return;\r\n        }\r\n        else {\r\n            db.transaction(\r\n                tx => {\r\n                  tx.executeSql(\r\n                    'INSERT INTO users (username, password) VALUES (?, ?)',\r\n                    [username, cf_password],\r\n                    (_tx, result) => {\r\n                      setMsg('Registered successfully');\r\n                      navigation.navigate('Login');\r\n                    },\r\n                    (_tx, error) => {\r\n                      setMsg('Registration failed');\r\n                      console.log('Error:', error);\r\n                      return true;\r\n                    }\r\n                  );\r\n                },\r\n                error => {\r\n                    console.log('Transaction error:', error);\r\n                  });\r\n                }\r\n            \r\n\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container_login}>\r\n            <Text style={styles.logo}>Register</Text>\r\n            <Text style={styles.text_mid}>{msg ? msg : 'No thing'}</Text>\r\n\r\n            <TextInput\r\n                style={styles.inputView}\r\n                placeholder=\"Username\"\r\n                placeholderTextColor=\"#003f5c\"\r\n                onChangeText={text => setUsername(text)}\r\n                value={username}\r\n            />\r\n\r\n            <TextInput\r\n                style={styles.inputView}\r\n                placeholder=\"Password\"\r\n                placeholderTextColor=\"#003f5c\"\r\n                secureTextEntry={true}\r\n                onChangeText={text => setPassword(text)}\r\n                value={password}\r\n            />\r\n\r\n            <TextInput\r\n                style={styles.inputView}\r\n                placeholder=\"Confirm Password\"\r\n                placeholderTextColor=\"#003f5c\"\r\n                secureTextEntry={true}\r\n                onChangeText={text => setConfirmPassword(text)}\r\n                value={confirm_password}\r\n            />\r\n\r\n            <TouchableOpacity style={styles.loginBtn} onPress={() => handleRegister(username, password, confirm_password)}>\r\n                <Text style={styles.loginText}>REGISTER</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default RegisterScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}