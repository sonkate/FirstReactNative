{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../elements/style\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    msg = _useState6[0],\n    setMsg = _useState6[1];\n  var db = SQLite.openDatabase('mydatabase.db');\n  var handleLogin = function handleLogin(username, password) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT username FROM users WHERE username = ? AND password = ?', [username, password], function (tx, _ref2) {\n        var _ref2$rows = _ref2.rows,\n          length = _ref2$rows.length,\n          _array = _ref2$rows._array;\n        if (length > 0) {\n          navigation.navigate('HomePage');\n        } else {\n          setMsg('Invalid username or password');\n        }\n      }, function (error) {\n        console.log(error);\n        return true;\n      });\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container_login,\n    children: [_jsx(Text, {\n      style: styles.logo,\n      children: \"Login\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Username\",\n        placeholderTextColor: \"#003f5c\",\n        onChangeText: function onChangeText(text) {\n          return setUsername(text);\n        },\n        value: username\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.inputView,\n      children: _jsx(TextInput, {\n        style: styles.inputText,\n        placeholder: \"Password\",\n        placeholderTextColor: \"#003f5c\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        value: password\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginBtn,\n      onPress: function onPress() {\n        return handleLogin(username, password);\n      },\n      children: _jsx(Text, {\n        style: styles.loginText,\n        children: \"LOGIN\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('Register');\n      },\n      children: _jsx(Text, {\n        style: styles.signupText,\n        children: \"Don't have an account? Sign up now\"\n      })\n    })]\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","styles","SQLite","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","msg","setMsg","db","openDatabase","handleLogin","transaction","tx","executeSql","_ref2","_ref2$rows","rows","length","_array","navigate","error","console","log","style","container_login","children","logo","inputView","inputText","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","loginBtn","onPress","loginText","signupText"],"sources":["D:/BKU/Đồ án đa ngành/FirstReactNative/src/screens/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport styles from '../../elements/style';\r\nimport * as SQLite from 'expo-sqlite'\r\n\r\ninterface ILoginProps {\r\n    navigation: any;\r\n}\r\n\r\nconst LoginScreen: React.FC<ILoginProps> = ({ navigation }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [msg, setMsg] = useState('');\r\n    const db = SQLite.openDatabase('mydatabase.db');\r\n\r\nconst handleLogin = (username: string, password: string) => {\r\n  db.transaction(tx => {\r\n    tx.executeSql(\r\n      'SELECT username FROM users WHERE username = ? AND password = ?',\r\n      [username, password],\r\n      (tx, { rows: { length, _array } }) => {\r\n        if (length > 0) {\r\n          // user found, navigate to the home screen\r\n          navigation.navigate('HomePage');\r\n        } else {\r\n          // user not found, display an error message\r\n          setMsg('Invalid username or password');\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        return true;\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n    return (\r\n        <View style={styles.container_login}>\r\n            <Text style={styles.logo}>Login</Text>\r\n            <TouchableOpacity style={styles.inputView}>\r\n                <TextInput\r\n                    style={styles.inputText}\r\n                    placeholder=\"Username\"\r\n                    placeholderTextColor=\"#003f5c\"\r\n                    onChangeText={text => setUsername(text)}\r\n                    value={username}\r\n                />\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.inputView}>\r\n                <TextInput\r\n                    style={styles.inputText}\r\n                    placeholder=\"Password\"\r\n                    placeholderTextColor=\"#003f5c\"\r\n                    secureTextEntry={true}\r\n                    onChangeText={text => setPassword(text)}\r\n                    value={password}\r\n                />\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.loginBtn} onPress={() => handleLogin(username, password)}>\r\n                <Text style={styles.loginText}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={() => navigation.navigate('Register')}>\r\n                <Text style={styles.signupText}>Don't have an account? Sign up now</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default LoginScreen;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAExC,OAAOC,MAAM;AACb,OAAO,KAAKC,MAAM,MAAM,aAAa;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAMrC,IAAMC,WAAkC,GAAG,SAArCA,WAAkCA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAAA,IAAAC,SAAA,GACpBd,QAAQ,CAAC,EAAE,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACInB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACNvB,QAAQ,CAAC,EAAE,CAAC;IAAAwB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA3BE,GAAG,GAAAD,UAAA;IAAEE,MAAM,GAAAF,UAAA;EAClB,IAAMG,EAAE,GAAGrB,MAAM,CAACsB,YAAY,CAAC,eAAe,CAAC;EAEnD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIZ,QAAgB,EAAEI,QAAgB,EAAK;IAC1DM,EAAE,CAACG,WAAW,CAAC,UAAAC,EAAE,EAAI;MACnBA,EAAE,CAACC,UAAU,CACX,gEAAgE,EAChE,CAACf,QAAQ,EAAEI,QAAQ,CAAC,EACpB,UAACU,EAAE,EAAAE,KAAA,EAAmC;QAAA,IAAAC,UAAA,GAAAD,KAAA,CAA/BE,IAAI;UAAIC,MAAM,GAAAF,UAAA,CAANE,MAAM;UAAEC,MAAM,GAAAH,UAAA,CAANG,MAAM;QAC3B,IAAID,MAAM,GAAG,CAAC,EAAE;UAEdvB,UAAU,CAACyB,QAAQ,CAAC,UAAU,CAAC;QACjC,CAAC,MAAM;UAELZ,MAAM,CAAC,8BAA8B,CAAC;QACxC;MACF,CAAC,EACD,UAAAa,KAAK,EAAI;QACPC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAO,IAAI;MACb,CAAC,CACF;IACH,CAAC,CAAC;EACJ,CAAC;EAEG,OACI7B,KAAA,CAACT,IAAI;IAACyC,KAAK,EAAErC,MAAM,CAACsC,eAAgB;IAAAC,QAAA,GAChCpC,IAAA,CAACN,IAAI;MAACwC,KAAK,EAAErC,MAAM,CAACwC,IAAK;MAAAD,QAAA,EAAC;IAAK,EAAO,EACtCpC,IAAA,CAACJ,gBAAgB;MAACsC,KAAK,EAAErC,MAAM,CAACyC,SAAU;MAAAF,QAAA,EACtCpC,IAAA,CAACL,SAAS;QACNuC,KAAK,EAAErC,MAAM,CAAC0C,SAAU;QACxBC,WAAW,EAAC,UAAU;QACtBC,oBAAoB,EAAC,SAAS;QAC9BC,YAAY,EAAE,SAAAA,aAAAC,IAAI;UAAA,OAAIjC,WAAW,CAACiC,IAAI,CAAC;QAAA,CAAC;QACxCC,KAAK,EAAEnC;MAAS;IAClB,EACa,EACnBT,IAAA,CAACJ,gBAAgB;MAACsC,KAAK,EAAErC,MAAM,CAACyC,SAAU;MAAAF,QAAA,EACtCpC,IAAA,CAACL,SAAS;QACNuC,KAAK,EAAErC,MAAM,CAAC0C,SAAU;QACxBC,WAAW,EAAC,UAAU;QACtBC,oBAAoB,EAAC,SAAS;QAC9BI,eAAe,EAAE,IAAK;QACtBH,YAAY,EAAE,SAAAA,aAAAC,IAAI;UAAA,OAAI7B,WAAW,CAAC6B,IAAI,CAAC;QAAA,CAAC;QACxCC,KAAK,EAAE/B;MAAS;IAClB,EACa,EACnBb,IAAA,CAACJ,gBAAgB;MAACsC,KAAK,EAAErC,MAAM,CAACiD,QAAS;MAACC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAM1B,WAAW,CAACZ,QAAQ,EAAEI,QAAQ,CAAC;MAAA,CAAC;MAAAuB,QAAA,EACrFpC,IAAA,CAACN,IAAI;QAACwC,KAAK,EAAErC,MAAM,CAACmD,SAAU;QAAAZ,QAAA,EAAC;MAAK;IAAO,EAC5B,EACnBpC,IAAA,CAACJ,gBAAgB;MAACmD,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAM1C,UAAU,CAACyB,QAAQ,CAAC,UAAU,CAAC;MAAA,CAAC;MAAAM,QAAA,EAC7DpC,IAAA,CAACN,IAAI;QAACwC,KAAK,EAAErC,MAAM,CAACoD,UAAW;QAAAb,QAAA,EAAC;MAAkC;IAAO,EAC1D;EAAA,EAChB;AAEf,CAAC;AAID,eAAejC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}