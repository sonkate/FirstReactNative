{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../elements/style\";\nimport * as SQLite from 'expo-sqlite';\nimport { useForm } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    confirm_password = _useState6[0],\n    setConfirmPassword = _useState6[1];\n  var db = SQLite.openDatabase('smarthome.db');\n  var _useForm = useForm(),\n    register = _useForm.register,\n    handleSubmit = _useForm.handleSubmit;\n  useEffect(function () {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);', []);\n    });\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM users', [], function (_, resultSet) {\n        console.log(resultSet.rows._array);\n      });\n    });\n  }, [db]);\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    msg = _useState8[0],\n    setMsg = _useState8[1];\n  var addUser = function addUser(username, password) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO users (username, password) VALUES (?, ?)', [username, password]);\n    });\n  };\n  var handleRegister = function handleRegister(username, password, cf_password) {\n    if (password !== cf_password) {\n      setMsg('Password did not match');\n      console.log(msg);\n      return;\n    }\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM users WHERE username = ?;', [username], function (_, result) {\n        if (result.rows.length > 0) {\n          setMsg('User exists');\n        } else {\n          addUser(username, password);\n          setMsg('Create user successfully');\n        }\n      });\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container_login,\n    children: [_jsx(Text, {\n      style: styles.logo,\n      children: \"Register\"\n    }), _jsx(Text, {\n      style: styles.text_mid,\n      children: msg ? msg : 'No thing'\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Username\",\n      placeholderTextColor: \"#003f5c\",\n      onChangeText: function onChangeText(text) {\n        return setUsername(text);\n      },\n      value: username\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Password\",\n      placeholderTextColor: \"#003f5c\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      },\n      value: password\n    }), _jsx(TextInput, {\n      style: styles.inputView,\n      placeholder: \"Confirm Password\",\n      placeholderTextColor: \"#003f5c\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return setConfirmPassword(text);\n      },\n      value: confirm_password\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginBtn,\n      onPress: function onPress() {\n        return handleRegister(username, password, confirm_password);\n      },\n      children: _jsx(Text, {\n        children: \"Submit\"\n      })\n    })]\n  });\n};\nexport default RegisterScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","styles","SQLite","useForm","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","confirm_password","setConfirmPassword","db","openDatabase","_useForm","register","handleSubmit","transaction","tx","executeSql","_","resultSet","console","log","rows","_array","_useState7","_useState8","msg","setMsg","addUser","handleRegister","cf_password","result","length","style","container_login","children","logo","text_mid","inputView","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","loginBtn","onPress"],"sources":["/home/son/Downloads/Mobile app/FirstReactNative/src/screens/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\nimport styles from '../../elements/style';\ninterface ILoginProps {\n    navigation: any;\n}\n\nimport * as SQLite from 'expo-sqlite';\nimport * as Crypto from 'expo-crypto';\nimport { useForm } from 'react-hook-form';\nimport { Button } from 'react-native-elements';\nconst RegisterScreen: React.FC<ILoginProps> = ({ navigation }) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirm_password, setConfirmPassword] = useState('');\n    const db = SQLite.openDatabase('smarthome.db');\n    const { register, handleSubmit } = useForm();\n    useEffect(() => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);',\n                [],\n            );\n        });\n\n        db.transaction(tx => {\n            tx.executeSql(\n                'SELECT * FROM users',\n                [],\n\n                (_, resultSet) => {\n                    console.log(resultSet.rows._array);\n                }\n            );\n        });\n    }, [db]);\n\n    const [msg, setMsg] = useState('');\n\n\n    const addUser = (username: string, password: string) => {\n        db.transaction((tx) => {\n            tx.executeSql(\n                'INSERT INTO users (username, password) VALUES (?, ?)',\n                [username, password],\n            );\n        });\n    }\n\n    const handleRegister = (username: string, password: string, cf_password: string) => {\n        // Handle login logic here\n        if (password !== cf_password) {\n            setMsg('Password did not match');\n            console.log(msg);\n            return;\n        }\n\n        db.transaction(tx => {\n            tx.executeSql(\n                'SELECT * FROM users WHERE username = ?;',\n                [username],\n                (_, result) => {\n                    if (result.rows.length > 0) {\n                        setMsg('User exists');\n                    } else {\n                        addUser(username, password);\n                        setMsg('Create user successfully');\n                    }\n                },\n            );\n        });\n    };\n\n    return (\n        <View style={styles.container_login}>\n            <Text style={styles.logo}>Register</Text>\n            <Text style={styles.text_mid}>{msg ? msg : 'No thing'}</Text>\n\n            <TextInput\n                style={styles.inputView}\n                placeholder=\"Username\"\n                placeholderTextColor=\"#003f5c\"\n                onChangeText={text => setUsername(text)}\n                value={username}\n            />\n\n            <TextInput\n                style={styles.inputView}\n                placeholder=\"Password\"\n                placeholderTextColor=\"#003f5c\"\n                secureTextEntry={true}\n                onChangeText={text => setPassword(text)}\n                value={password}\n            />\n\n            <TextInput\n                style={styles.inputView}\n                placeholder=\"Confirm Password\"\n                placeholderTextColor=\"#003f5c\"\n                secureTextEntry={true}\n                onChangeText={text => setConfirmPassword(text)}\n                value={confirm_password}\n            />\n\n            <TouchableOpacity style={styles.loginBtn} onPress={() => handleRegister(username, password, confirm_password)}>\n                <Text>Submit</Text>\n            </TouchableOpacity>\n        </View>\n    )\n};\n\n\n\nexport default RegisterScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}